{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jeff\\\\thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { secondsToDuration, minutesToDuration } from \"../utils/duration\";\nimport BreakDuration from \"./BreakDuration\";\nimport FocusDuration from \"./FocusDuration\";\nimport PlayPauseStop from \"./PlayPauseStop\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction Pomodoro() {\n  const [appStatus, setAppStatus] = useState(\"setup\");\n  const [focusTime, setFocusTime] = useState(25);\n  const [breakTime, setBreakTime] = useState(5);\n  const [progressBarValue, setProgressBarValue] = useState(0);\n  const [progressBarWidth, setProgressBarWidth] = useState(\"0%\");\n  const [focusCountdown, setFocusCountdown] = useState(minutesToDuration(focusTime));\n  const [breakCountdown, setBreakCountdown] = useState(minutesToDuration(breakTime));\n\n  function processCountdown() {\n    if (appStatus === \"countingFocus\") {\n      setFocusCountdown(currentValue => {\n        const minutesAndSeconds = currentValue.split(\":\");\n        const countDownValueSecs = parseFloat(minutesAndSeconds[0]) * 60 + parseFloat(minutesAndSeconds[1]);\n        const newCountDownValue = secondsToDuration(countDownValueSecs - 1);\n        const progressBarIncrement = 100 / (focusTime * 60);\n        setProgressBarValue(currentProgressBarValue => parseFloat(currentProgressBarValue) + progressBarIncrement);\n        setProgressBarWidth(currentProgressBarWidth => parseFloat(currentProgressBarWidth) + progressBarIncrement + \"%\");\n\n        if (countDownValueSecs === 1) {\n          setAppStatus(\"countingBreak\");\n          setProgressBarValue(0);\n          setProgressBarWidth(\"0%\");\n          new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n        }\n\n        return newCountDownValue;\n      });\n    } else {\n      setBreakCountdown(currentValue => {\n        const minutesAndSeconds = currentValue.split(\":\");\n        const countDownValueSecs = parseFloat(minutesAndSeconds[0]) * 60 + parseFloat(minutesAndSeconds[1]);\n        const newCountDownValue = secondsToDuration(countDownValueSecs - 1);\n        const progressBarIncrement = 100 / (breakTime * 60);\n        setProgressBarValue(currentProgressBarValue => parseFloat(currentProgressBarValue) + progressBarIncrement);\n        setProgressBarWidth(currentProgressBarWidth => parseFloat(currentProgressBarWidth) + progressBarIncrement + \"%\");\n\n        if (countDownValueSecs === 1) {\n          new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n          setFocusCountdown(minutesToDuration(focusTime));\n          setBreakCountdown(minutesToDuration(breakTime));\n          setProgressBarWidth(\"0%\");\n          setProgressBarValue(0);\n          setAppStatus(\"countingFocus\");\n        }\n\n        return newCountDownValue;\n      });\n    }\n  }\n\n  useInterval(() => {\n    processCountdown();\n  }, appStatus.includes(\"counting\") ? 1000 : null);\n\n  function playPause() {\n    switch (appStatus) {\n      case \"setup\":\n        setAppStatus(\"countingFocus\");\n        break;\n\n      case \"countingFocus\":\n        setAppStatus(\"pauseFocus\");\n        break;\n\n      case \"countingBreak\":\n        setAppStatus(\"pauseBreak\");\n        break;\n\n      case \"pauseFocus\":\n        setAppStatus(\"countingFocus\");\n        break;\n\n      case \"pauseBreak\":\n        setAppStatus(\"countingBreak\");\n        break;\n\n      default:\n    }\n  }\n\n  function stop() {\n    setAppStatus(\"setup\");\n    setFocusTime(25);\n    setBreakTime(5);\n    setFocusCountdown(minutesToDuration(focusTime));\n    setBreakCountdown(minutesToDuration(breakTime));\n    setProgressBarWidth(\"0%\");\n    setProgressBarValue(0);\n  }\n\n  const mouseClickHandler = event => {\n    const buttonTestID = event.target.attributes[\"data-testid\"].value;\n\n    if (appStatus === \"setup\") {\n      switch (buttonTestID) {\n        case \"decrease-focus\":\n          setFocusTime(currentFocusTime => Math.max(5, currentFocusTime - 5));\n          setFocusCountdown(minutesToDuration(Math.max(5, parseFloat(focusCountdown) - 5)));\n          break;\n\n        case \"increase-focus\":\n          setFocusTime(Math.min(60, focusTime + 5));\n          setFocusCountdown(minutesToDuration(Math.min(60, parseFloat(focusCountdown) + 5)));\n          break;\n\n        case \"decrease-break\":\n          setBreakTime(Math.max(1, breakTime - 1));\n          setBreakCountdown(minutesToDuration(Math.max(1, parseFloat(breakTime) - 1)));\n          break;\n\n        case \"increase-break\":\n          setBreakTime(Math.min(15, breakTime + 1));\n          setBreakCountdown(minutesToDuration(Math.min(15, parseFloat(breakTime) + 1)));\n          break;\n\n        default:\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FocusDuration, {\n    mouseClickHandler: mouseClickHandler,\n    focusTime: focusTime,\n    minutesToDuration: minutesToDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BreakDuration, {\n    mouseClickHandler: mouseClickHandler,\n    breakTime: breakTime,\n    minutesToDuration: minutesToDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(PlayPauseStop, {\n    playPause: playPause,\n    appStatus: appStatus,\n    classNames: classNames,\n    stop: stop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ProgressBar, {\n    minutesToDuration: minutesToDuration,\n    focusTime: focusTime,\n    focusCountdown: focusCountdown,\n    breakTime: breakTime,\n    breakCountdown: breakCountdown,\n    progressBarValue: progressBarValue,\n    progressBarWidth: progressBarWidth,\n    appStatus: appStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/Jeff/thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","secondsToDuration","minutesToDuration","BreakDuration","FocusDuration","PlayPauseStop","ProgressBar","Pomodoro","appStatus","setAppStatus","focusTime","setFocusTime","breakTime","setBreakTime","progressBarValue","setProgressBarValue","progressBarWidth","setProgressBarWidth","focusCountdown","setFocusCountdown","breakCountdown","setBreakCountdown","processCountdown","currentValue","minutesAndSeconds","split","countDownValueSecs","parseFloat","newCountDownValue","progressBarIncrement","currentProgressBarValue","currentProgressBarWidth","Audio","play","includes","playPause","stop","mouseClickHandler","event","buttonTestID","target","attributes","value","currentFocusTime","Math","max","min"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport {secondsToDuration,minutesToDuration} from \"../utils/duration\";\nimport BreakDuration from \"./BreakDuration\"\nimport FocusDuration from \"./FocusDuration\"\nimport PlayPauseStop from \"./PlayPauseStop\"\nimport ProgressBar from \"./ProgressBar\"\n\nfunction Pomodoro() {\n  const [appStatus, setAppStatus] = useState(\"setup\")\n  const [focusTime, setFocusTime] = useState(25)\n  const [breakTime, setBreakTime] = useState(5)\n  const [progressBarValue, setProgressBarValue] = useState(0)\n  const [progressBarWidth, setProgressBarWidth] = useState(\"0%\")\n  const [focusCountdown, setFocusCountdown] = useState(minutesToDuration(focusTime))\n  const [breakCountdown, setBreakCountdown] = useState(minutesToDuration(breakTime))\n  \n  function processCountdown() {\n    if (appStatus === \"countingFocus\") {\n      setFocusCountdown((currentValue) => {\n        \n        const minutesAndSeconds = currentValue.split(\":\");\n        const countDownValueSecs = parseFloat(minutesAndSeconds[0])*60 + parseFloat(minutesAndSeconds[1]);\n        const newCountDownValue = secondsToDuration((countDownValueSecs - 1));\n        const progressBarIncrement = 100 / (focusTime*60);\n        setProgressBarValue((currentProgressBarValue) => parseFloat(currentProgressBarValue) + progressBarIncrement);\n        setProgressBarWidth((currentProgressBarWidth) => parseFloat(currentProgressBarWidth) + progressBarIncrement + \"%\");\n      if (countDownValueSecs === 1) {\n        setAppStatus(\"countingBreak\");\n          setProgressBarValue(0);\n          setProgressBarWidth(\"0%\");\n          new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n      }\n      return newCountDownValue\n      })\n    } else {\n      setBreakCountdown((currentValue) => {\n       \n        const minutesAndSeconds = currentValue.split(\":\");\n        const countDownValueSecs = parseFloat(minutesAndSeconds[0])*60 + parseFloat(minutesAndSeconds[1]);\n        const newCountDownValue = secondsToDuration((countDownValueSecs - 1));\n        const progressBarIncrement = 100 / (breakTime*60);\n        setProgressBarValue((currentProgressBarValue) => parseFloat(currentProgressBarValue) + progressBarIncrement);\n        setProgressBarWidth((currentProgressBarWidth) => parseFloat(currentProgressBarWidth) + progressBarIncrement + \"%\");\n       \n        if (countDownValueSecs === 1) {\n          new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n          setFocusCountdown(minutesToDuration(focusTime));\n          setBreakCountdown(minutesToDuration(breakTime));\n          setProgressBarWidth(\"0%\");\n          setProgressBarValue(0);\n          setAppStatus(\"countingFocus\");\n        }\n        return newCountDownValue\n      })\n    }\n  }\n\n  useInterval(\n    () => {\n      processCountdown()   \n    },\n    appStatus.includes(\"counting\") ? 1000 : null\n  );\n\n\n\n\n\n  function playPause() {\n    switch (appStatus) {\n      case \"setup\":\n        setAppStatus(\"countingFocus\");\n        break;\n      case \"countingFocus\":\n        setAppStatus(\"pauseFocus\");\n        break;\n      case \"countingBreak\":\n        setAppStatus(\"pauseBreak\");\n        break;\n      case \"pauseFocus\":\n        setAppStatus(\"countingFocus\")\n        break;\n      case \"pauseBreak\":\n        setAppStatus(\"countingBreak\")\n        break;\n        default:\n    }\n  }\n\n  function stop() {\n    setAppStatus(\"setup\");\n    setFocusTime(25);\n    setBreakTime(5);\n    setFocusCountdown(minutesToDuration(focusTime));\n    setBreakCountdown(minutesToDuration(breakTime));\n    setProgressBarWidth(\"0%\");\n    setProgressBarValue(0);\n  }\n\n  const mouseClickHandler = (event) => {\n    const buttonTestID = event.target.attributes[\"data-testid\"].value;\n    if (appStatus === \"setup\") {\n      switch (buttonTestID) {\n        case \"decrease-focus\":\n          setFocusTime((currentFocusTime) => Math.max(5,currentFocusTime - 5));\n          setFocusCountdown(minutesToDuration(Math.max(5,parseFloat(focusCountdown) - 5)));\n          break\n        case \"increase-focus\":      \n          setFocusTime(Math.min(60,focusTime + 5));\n          setFocusCountdown(minutesToDuration(Math.min(60,parseFloat(focusCountdown) + 5)));\n          break          \n        case \"decrease-break\":\n            setBreakTime(Math.max(1,breakTime - 1));\n            setBreakCountdown(minutesToDuration(Math.max(1,parseFloat(breakTime) - 1)));\n            break          \n        case \"increase-break\":\n            setBreakTime(Math.min(15,breakTime + 1));\n            setBreakCountdown(minutesToDuration(Math.min(15,parseFloat(breakTime) + 1)));\n            break \n            default:         \n      }\n    }\n  }\n\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <FocusDuration \n          mouseClickHandler={mouseClickHandler} \n          focusTime={focusTime} \n          minutesToDuration={minutesToDuration}\n        />\n        <BreakDuration\n          mouseClickHandler={mouseClickHandler} \n          breakTime={breakTime} \n          minutesToDuration={minutesToDuration}\n        />\n      </div>\n        <PlayPauseStop\n          playPause={playPause} \n          appStatus={appStatus}\n          classNames={classNames}\n          stop={stop}\n      /> \n      <ProgressBar \n        minutesToDuration={minutesToDuration}\n        focusTime={focusTime}\n        focusCountdown={focusCountdown}\n        breakTime={breakTime}\n        breakCountdown={breakCountdown}\n        progressBarValue={progressBarValue} \n        progressBarWidth={progressBarWidth}\n        appStatus={appStatus}\n      />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}